# -*- coding: utf-8 -*-

"""
postnlecommerceapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from postnlecommerceapis.api_helper import APIHelper
from postnlecommerceapis.configuration import Server
from postnlecommerceapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from postnlecommerceapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from postnlecommerceapis.models.labelling_response import LabellingResponse
from postnlecommerceapis.exceptions.labelling_response_invalid_exception import LabellingResponseInvalidException
from postnlecommerceapis.exceptions.labelling_unauthorized_exception import LabellingUnauthorizedException
from postnlecommerceapis.exceptions.labelling_method_not_allowed_exception import LabellingMethodNotAllowedException
from postnlecommerceapis.exceptions.labelling_too_many_request_exception import LabellingTooManyRequestException
from postnlecommerceapis.exceptions.labelling_response_error_exception import LabellingResponseErrorException


class LabellingController(BaseController):

    """A Controller to access Endpoints in the postnlecommerceapis API."""
    def __init__(self, config):
        super(LabellingController, self).__init__(config)

    def generate_a_label_and_confirmation(self,
                                          body,
                                          confirm=True):
        """Does a POST request to /shipment/v2_2/label.

        Generate a label and confirmation

        Args:
            body (LabellingRequest): TODO: type description here.
            confirm (bool, optional): With the Confirm boolean in the request,
                you can determine if you want to confirm the shipment in the
                same call or not. If the Boolean variable is true the shipment
                will be preannounced. If this is set to false, then an
                additional Confirming API request needs to be made.

        Returns:
            LabellingResponse: Response from the API. A Label

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/shipment/v2_2/label')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .query_param(Parameter()
                         .key('confirm')
                         .value(confirm))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LabellingResponse.from_dictionary)
            .local_error('400', 'Error payload', LabellingResponseInvalidException)
            .local_error('401', 'Invalid apikey', LabellingUnauthorizedException)
            .local_error('405', 'Method not allowed', LabellingMethodNotAllowedException)
            .local_error('429', 'Too many requests', LabellingTooManyRequestException)
            .local_error('500', 'Internal server error', LabellingResponseErrorException)
        ).execute()
