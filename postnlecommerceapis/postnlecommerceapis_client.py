# -*- coding: utf-8 -*-

"""
postnlecommerceapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from postnlecommerceapis.configuration import Configuration
from postnlecommerceapis.controllers.base_controller import BaseController
from postnlecommerceapis.configuration import Environment
from postnlecommerceapis.http.auth.custom_header_authentication import CustomHeaderAuthentication
from postnlecommerceapis.controllers.postalcode_check_controller\
    import PostalcodeCheckController
from postnlecommerceapis.controllers.checkout_controller\
    import CheckoutController
from postnlecommerceapis.controllers.deliverydate_controller\
    import DeliverydateController
from postnlecommerceapis.controllers.locations_controller\
    import LocationsController
from postnlecommerceapis.controllers.timeframes_controller\
    import TimeframesController
from postnlecommerceapis.controllers.labelling_controller\
    import LabellingController
from postnlecommerceapis.controllers.barcode_controller\
    import BarcodeController
from postnlecommerceapis.controllers.confirming_controller\
    import ConfirmingController
from postnlecommerceapis.controllers.track_trace_controller\
    import TrackTraceController


class PostnlecommerceapisClient(object):

    @LazyProperty
    def postalcode_check(self):
        return PostalcodeCheckController(self.global_configuration)

    @LazyProperty
    def checkout(self):
        return CheckoutController(self.global_configuration)

    @LazyProperty
    def deliverydate(self):
        return DeliverydateController(self.global_configuration)

    @LazyProperty
    def locations(self):
        return LocationsController(self.global_configuration)

    @LazyProperty
    def timeframes(self):
        return TimeframesController(self.global_configuration)

    @LazyProperty
    def labelling(self):
        return LabellingController(self.global_configuration)

    @LazyProperty
    def barcode(self):
        return BarcodeController(self.global_configuration)

    @LazyProperty
    def confirming(self):
        return ConfirmingController(self.global_configuration)

    @LazyProperty
    def track_trace(self):
        return TrackTraceController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                 retry_methods=['GET', 'PUT'],
                 environment=Environment.PRODUCTION, apikey='TODO: Replace',
                 config=None):
        if config is None:
            self.config = Configuration(
                                         http_client_instance=http_client_instance,
                                         override_http_client_configuration=override_http_client_configuration,
                                         http_call_back=http_call_back,
                                         timeout=timeout,
                                         max_retries=max_retries,
                                         backoff_factor=backoff_factor,
                                         retry_statuses=retry_statuses,
                                         retry_methods=retry_methods,
                                         environment=environment, apikey=apikey)
        else:
            self.config = config

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())
        self.initialize_auth_managers(self.global_configuration)

        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

    def initialize_auth_managers(self, global_config):
        http_client_config = global_config.get_http_client_configuration()
        self.auth_managers = { key: None for key in ['global']}
        self.auth_managers['global'] = CustomHeaderAuthentication(http_client_config.apikey)
        return self.auth_managers
